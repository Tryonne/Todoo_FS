{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport \"./App.css\";\n\n//import { DragDropContext, DropResult } from \"react-beautiful-dnd\";\n\nconst App = () => {\n  _s();\n  const [todo, setTodo] = useState(\"\"); // State em que : O todo é uma variavel string  e o setTodo é uma função que atualiza o estado do todo\n  // logo para termos o tipo do setTodo (que precisamos na interface Props do InputField temos de usar o React.Dispatch<React.SetStateAction<string>> que obtemos passando com rato por cima do setTodo no useState)\n  const [todos, setTodos] = useState([]);\n  const [CompletedTodos, setCompletedTodos] = useState([]);\n  const handleAdd = e => {\n    // Função que adiciona uma nova tarefa \n    e.preventDefault();\n    if (todo) {\n      setTodos([...todos, {\n        id: Date.now(),\n        todo,\n        isDone: false\n      }]); // Parametros do objeto (tarefa): id, todo e isDone\n      setTodo(\"\"); // Limpa o campo de input após adicionar a tarefa\n    }\n  };\n  const onDragEnd = result => {\n    const {\n      destination,\n      source\n    } = result;\n    console.log(result);\n    if (!destination) {\n      return;\n    }\n    if (destination.droppableId === source.droppableId && destination.index === source.index) {\n      return;\n    }\n    let add;\n    let active = todos;\n    let complete = CompletedTodos;\n\n    // verifica se a tarefa esta a ser movida da lista ativa para a lista completa ou vice-versa\n\n    if (source.droppableId === \"TodosList\") {\n      add = active[source.index];\n      active.splice(source.index, 1);\n    } else {\n      add = complete[source.index];\n      complete.splice(source.index, 1);\n    }\n\n    // isto faz com que a tarefa seja movida de uma lista para outra, ou dentro da mesma lista\n    if (destination.droppableId === \"TodosList\") {\n      active.splice(destination.index, 0, add);\n    } else {\n      complete.splice(destination.index, 0, add);\n    }\n    setCompletedTodos(complete);\n    setTodos(active);\n  };\n};\n_s(App, \"0ODy7xZInng5ZMwT1ktJxZhAnKc=\");\n_c = App;\nexport default App;\n\n// Em React, sempre que temos um conjunto de dados, convem usar um array no State para conseguir guardar mais que uma tarefa neste caso.\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","App","_s","todo","setTodo","todos","setTodos","CompletedTodos","setCompletedTodos","handleAdd","e","preventDefault","id","Date","now","isDone","onDragEnd","result","destination","source","console","log","droppableId","index","add","active","complete","splice","_c","$RefreshReg$"],"sources":["C:/Users/Guilherme/Desktop/faculdade/24_25/24/25/Uni/Segundo Semestre/ZUMER ESTÁGIO/ReactTypeScript_TodoList/frontend/src/App.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\nimport InputField from \"./components/InputField\";\nimport TodoList from \"./components/TodoList\";\n//import { DragDropContext, DropResult } from \"react-beautiful-dnd\";\nimport { Todo } from \"./models/models\";\n\nconst App: React.FC = () => {\n  const [todo, setTodo] = useState<string>(\"\"); // State em que : O todo é uma variavel string  e o setTodo é uma função que atualiza o estado do todo\n                                                // logo para termos o tipo do setTodo (que precisamos na interface Props do InputField temos de usar o React.Dispatch<React.SetStateAction<string>> que obtemos passando com rato por cima do setTodo no useState)\n  const [todos, setTodos] = useState<Array<Todo>>([]);\n  const [CompletedTodos, setCompletedTodos] = useState<Array<Todo>>([]);\n\n  const handleAdd = (e: React.FormEvent) => { // Função que adiciona uma nova tarefa \n    e.preventDefault();\n\n    if (todo) {\n      setTodos([...todos, { id: Date.now(), todo, isDone: false }]); // Parametros do objeto (tarefa): id, todo e isDone\n      setTodo(\"\"); // Limpa o campo de input após adicionar a tarefa\n    }\n  };\n\n  const onDragEnd = (result: DropResult) => {    \n    const { destination, source } = result;\n\n    console.log(result);\n\n    if (!destination) {\n      return;\n    }\n\n    if (\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    ) {\n      return;\n    }\n\n    let add;\n    let active = todos;\n    let complete = CompletedTodos;\n    \n    // verifica se a tarefa esta a ser movida da lista ativa para a lista completa ou vice-versa\n\n    if (source.droppableId === \"TodosList\") { \n      add = active[source.index];\n      active.splice(source.index, 1);\n    } else {\n      add = complete[source.index];\n      complete.splice(source.index, 1);\n    }\n\n    // isto faz com que a tarefa seja movida de uma lista para outra, ou dentro da mesma lista\n    if (destination.droppableId === \"TodosList\") { \n      active.splice(destination.index, 0, add);\n    } else {\n      complete.splice(destination.index, 0, add);\n    }\n\n    setCompletedTodos(complete);\n    setTodos(active);\n  };\n\n \n};\n\nexport default App;\n\n// Em React, sempre que temos um conjunto de dados, convem usar um array no State para conseguir guardar mais que uma tarefa neste caso."],"mappings":";AAAA,SAAgBA,QAAQ,QAAQ,OAAO;AACvC,OAAO,WAAW;;AAGlB;;AAGA,MAAMC,GAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGJ,QAAQ,CAAS,EAAE,CAAC,CAAC,CAAC;EACA;EAC9C,MAAM,CAACK,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAAc,EAAE,CAAC;EACnD,MAAM,CAACO,cAAc,EAAEC,iBAAiB,CAAC,GAAGR,QAAQ,CAAc,EAAE,CAAC;EAErE,MAAMS,SAAS,GAAIC,CAAkB,IAAK;IAAE;IAC1CA,CAAC,CAACC,cAAc,CAAC,CAAC;IAElB,IAAIR,IAAI,EAAE;MACRG,QAAQ,CAAC,CAAC,GAAGD,KAAK,EAAE;QAAEO,EAAE,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC;QAAEX,IAAI;QAAEY,MAAM,EAAE;MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;MAC/DX,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC;IACf;EACF,CAAC;EAED,MAAMY,SAAS,GAAIC,MAAkB,IAAK;IACxC,MAAM;MAAEC,WAAW;MAAEC;IAAO,CAAC,GAAGF,MAAM;IAEtCG,OAAO,CAACC,GAAG,CAACJ,MAAM,CAAC;IAEnB,IAAI,CAACC,WAAW,EAAE;MAChB;IACF;IAEA,IACEA,WAAW,CAACI,WAAW,KAAKH,MAAM,CAACG,WAAW,IAC9CJ,WAAW,CAACK,KAAK,KAAKJ,MAAM,CAACI,KAAK,EAClC;MACA;IACF;IAEA,IAAIC,GAAG;IACP,IAAIC,MAAM,GAAGpB,KAAK;IAClB,IAAIqB,QAAQ,GAAGnB,cAAc;;IAE7B;;IAEA,IAAIY,MAAM,CAACG,WAAW,KAAK,WAAW,EAAE;MACtCE,GAAG,GAAGC,MAAM,CAACN,MAAM,CAACI,KAAK,CAAC;MAC1BE,MAAM,CAACE,MAAM,CAACR,MAAM,CAACI,KAAK,EAAE,CAAC,CAAC;IAChC,CAAC,MAAM;MACLC,GAAG,GAAGE,QAAQ,CAACP,MAAM,CAACI,KAAK,CAAC;MAC5BG,QAAQ,CAACC,MAAM,CAACR,MAAM,CAACI,KAAK,EAAE,CAAC,CAAC;IAClC;;IAEA;IACA,IAAIL,WAAW,CAACI,WAAW,KAAK,WAAW,EAAE;MAC3CG,MAAM,CAACE,MAAM,CAACT,WAAW,CAACK,KAAK,EAAE,CAAC,EAAEC,GAAG,CAAC;IAC1C,CAAC,MAAM;MACLE,QAAQ,CAACC,MAAM,CAACT,WAAW,CAACK,KAAK,EAAE,CAAC,EAAEC,GAAG,CAAC;IAC5C;IAEAhB,iBAAiB,CAACkB,QAAQ,CAAC;IAC3BpB,QAAQ,CAACmB,MAAM,CAAC;EAClB,CAAC;AAGH,CAAC;AAACvB,EAAA,CAzDID,GAAa;AAAA2B,EAAA,GAAb3B,GAAa;AA2DnB,eAAeA,GAAG;;AAElB;AAAA,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}