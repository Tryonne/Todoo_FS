{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Guilherme\\\\Desktop\\\\faculdade\\\\24_25\\\\24\\\\25\\\\Uni\\\\Segundo Semestre\\\\ZUMER EST\\xC1GIO\\\\ReactTypeScript_TodoList\\\\frontend\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./App.css\";\nimport InputField from \"./components/InputField\";\nimport TodoList from \"./components/TodoList\";\n//import { DragDropContext, DropResult } from \"react-beautiful-dnd\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [todo, setTodo] = useState(\"\"); // State em que : O todo é uma variavel string  e o setTodo é uma função que atualiza o estado do todo\n  // logo para termos o tipo do setTodo (que precisamos na interface Props do InputField temos de usar o React.Dispatch<React.SetStateAction<string>> que obtemos passando com rato por cima do setTodo no useState)\n  const [todos, setTodos] = useState([]);\n  const [CompletedTodos, setCompletedTodos] = useState([]);\n  const handleAdd = e => {\n    // Função que adiciona uma nova tarefa \n    e.preventDefault();\n    if (todo) {\n      setTodos([...todos, {\n        id: Date.now(),\n        todo,\n        isDone: false\n      }]); // Parametros do objeto (tarefa): id, todo e isDone\n      setTodo(\"\"); // Limpa o campo de input após adicionar a tarefa\n    }\n  };\n  const onDragEnd = result => {\n    const {\n      destination,\n      source\n    } = result;\n    console.log(result);\n    if (!destination) {\n      return;\n    }\n    if (destination.droppableId === source.droppableId && destination.index === source.index) {\n      return;\n    }\n    let add;\n    let active = todos;\n    let complete = CompletedTodos;\n\n    // verifica se a tarefa esta a ser movida da lista ativa para a lista completa ou vice-versa\n\n    if (source.droppableId === \"TodosList\") {\n      add = active[source.index];\n      active.splice(source.index, 1);\n    } else {\n      add = complete[source.index];\n      complete.splice(source.index, 1);\n    }\n\n    // isto faz com que a tarefa seja movida de uma lista para outra, ou dentro da mesma lista\n    if (destination.droppableId === \"TodosList\") {\n      active.splice(destination.index, 0, add);\n    } else {\n      complete.splice(destination.index, 0, add);\n    }\n    setCompletedTodos(complete);\n    setTodos(active);\n  };\n  return /*#__PURE__*/_jsxDEV(DragDropContext, {\n    onDragEnd: onDragEnd,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"heading\",\n        children: [\"TODOO DEL GUI\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 9\n        }, this), \" Design By Sara\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputField, {\n        todo: todo,\n        setTodo: setTodo,\n        handleAdd: handleAdd\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TodoList, {\n        todos: todos // Retorna as tarefas criadas criando uma nova div com a classe todos\n        ,\n        setTodos: setTodos,\n        CompletedTodos: CompletedTodos,\n        setCompletedTodos: setCompletedTodos\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"0ODy7xZInng5ZMwT1ktJxZhAnKc=\");\n_c = App;\nexport default App;\n\n// Em React, sempre que temos um conjunto de dados, convem usar um array no State para conseguir guardar mais que uma tarefa neste caso.\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","InputField","TodoList","jsxDEV","_jsxDEV","App","_s","todo","setTodo","todos","setTodos","CompletedTodos","setCompletedTodos","handleAdd","e","preventDefault","id","Date","now","isDone","onDragEnd","result","destination","source","console","log","droppableId","index","add","active","complete","splice","DragDropContext","children","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Guilherme/Desktop/faculdade/24_25/24/25/Uni/Segundo Semestre/ZUMER ESTÁGIO/ReactTypeScript_TodoList/frontend/src/App.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\nimport InputField from \"./components/InputField\";\nimport TodoList from \"./components/TodoList\";\n//import { DragDropContext, DropResult } from \"react-beautiful-dnd\";\nimport { Todo } from \"./models/models\";\n\nconst App: React.FC = () => {\n  const [todo, setTodo] = useState<string>(\"\"); // State em que : O todo é uma variavel string  e o setTodo é uma função que atualiza o estado do todo\n                                                // logo para termos o tipo do setTodo (que precisamos na interface Props do InputField temos de usar o React.Dispatch<React.SetStateAction<string>> que obtemos passando com rato por cima do setTodo no useState)\n  const [todos, setTodos] = useState<Array<Todo>>([]);\n  const [CompletedTodos, setCompletedTodos] = useState<Array<Todo>>([]);\n\n  const handleAdd = (e: React.FormEvent) => { // Função que adiciona uma nova tarefa \n    e.preventDefault();\n\n    if (todo) {\n      setTodos([...todos, { id: Date.now(), todo, isDone: false }]); // Parametros do objeto (tarefa): id, todo e isDone\n      setTodo(\"\"); // Limpa o campo de input após adicionar a tarefa\n    }\n  };\n\n  const onDragEnd = (result: DropResult) => {    \n    const { destination, source } = result;\n\n    console.log(result);\n\n    if (!destination) {\n      return;\n    }\n\n    if (\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    ) {\n      return;\n    }\n\n    let add;\n    let active = todos;\n    let complete = CompletedTodos;\n    \n    // verifica se a tarefa esta a ser movida da lista ativa para a lista completa ou vice-versa\n\n    if (source.droppableId === \"TodosList\") { \n      add = active[source.index];\n      active.splice(source.index, 1);\n    } else {\n      add = complete[source.index];\n      complete.splice(source.index, 1);\n    }\n\n    // isto faz com que a tarefa seja movida de uma lista para outra, ou dentro da mesma lista\n    if (destination.droppableId === \"TodosList\") { \n      active.splice(destination.index, 0, add);\n    } else {\n      complete.splice(destination.index, 0, add);\n    }\n\n    setCompletedTodos(complete);\n    setTodos(active);\n  };\n\n  return (\n    <DragDropContext onDragEnd={onDragEnd}>\n      <div className=\"App\">\n        <span className=\"heading\">TODOO DEL GUI\n        <br /> Design By Sara\n        </span>\n        <InputField todo={todo} setTodo={setTodo} handleAdd={handleAdd} />  \n        <TodoList\n          todos={todos} // Retorna as tarefas criadas criando uma nova div com a classe todos\n          setTodos={setTodos}\n          CompletedTodos={CompletedTodos}\n          setCompletedTodos={setCompletedTodos}\n        />\n      </div>\n    </DragDropContext>\n  );\n};\n\nexport default App;\n\n// Em React, sempre que temos um conjunto de dados, convem usar um array no State para conseguir guardar mais que uma tarefa neste caso."],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}